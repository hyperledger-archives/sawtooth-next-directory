#!/usr/bin/env python3

# Copyright 2019 Contributors to Hyperledger Sawtooth
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -----------------------------------------------------------------------------

import argparse
import logging
import sys
import os

import rethinkdb as r
from rethinkdb.errors import ReqlRuntimeError

LOGGER = logging.getLogger(__name__)
LOGGER.level = logging.INFO
LOGGER.addHandler(logging.StreamHandler(sys.stdout))

DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_PORT = os.getenv('DB_PORT', '28015')
DB_NAME = os.getenv('DB_NAME', 'rbac')


def parse_args(args):
    parser = argparse.ArgumentParser()
    parser.add_argument('--host',
                        help='The host for the database',
                        default=DB_HOST)
    parser.add_argument('--port',
                        help='The port for the database',
                        default=DB_PORT)
    parser.add_argument('--name',
                        help='The name of the database',
                        default=DB_NAME)
    return parser.parse_args(args)


def setup_db(host, port, name):
    conn = r.connect(host=host, port=port)
    LOGGER.info('Connection opened')
    try:
        LOGGER.info('Creating database: %s', name)
        r.db_create(name).run(conn)

        LOGGER.info('Creating table: auth')
        r.db(name).table_create("auth", primary_key="user_id").run(conn)
        r.db(name).table("auth").index_create("username").run(conn)

        LOGGER.info('Creating table: blocks')
        r.db(name).table_create('blocks', primary_key='block_num').run(conn)
        r.db(name).table('blocks').index_create('block_id').run(conn)

        LOGGER.info('Creating table: state')
        r.db(name).table_create('state', primary_key='address').run(conn)
        r.db(name).table("state").index_create("object", [r.row["object_type"], r.row["object_id"]]).run(conn)

        LOGGER.info('Creating table: state_history')
        r.db(name).table_create('state_history').run(conn)
        r.db(name).table("state_history").index_create("address").run(conn)
        r.db(name).table("state_history").index_create("object", [r.row["object_type"], r.row["object_id"]]).run(conn)

        LOGGER.info('Creating table: metadata')
        r.db(name).table_create('metadata', primary_key='address').run(conn)
        r.db(name).table("metadata").index_create("object", [r.row["object_type"], r.row["object_id"]]).run(conn)

        LOGGER.info('Creating table: users')
        r.db(name).table_create('users').run(conn)
        r.db(name).table('users').index_create('user_id').run(conn)
        r.db(name).table("users").index_create("username").run(conn)
        r.db(name).table("users").index_create("email").run(conn)

        LOGGER.info('Creating table: sync_tracker')
        r.db(name).table_create('sync_tracker').run(conn)

        LOGGER.info('Creating table: inbound_queue')
        r.db(name).table_create('inbound_queue').run(conn)

        LOGGER.info('Creating table: inbound_queue_errors')
        r.db(name).table_create('inbound_queue_errors').run(conn)

        LOGGER.info('Creating table: inbound_queue_archive')
        r.db(name).table_create('inbound_queue_archive').run(conn)

        LOGGER.info('Creating table: outbound_queue')
        r.db(name).table_create('outbound_queue').run(conn)

        LOGGER.info('Creating table: outbound_queue_archive')
        r.db(name).table_create('outbound_queue_archive').run(conn)

        LOGGER.info('Creating table: changelog')
        r.db(name).table_create('changelog').run(conn)

        LOGGER.info('Creating table: proposals')
        r.db(name).table_create('proposals').run(conn)
        r.db(name).table('proposals').index_create('proposal_id').run(conn)
        r.db(name).table('proposals').index_create('opener').run(conn)

        LOGGER.info('Creating table and sub-tables: tasks')
        task_tables = r.expr(['tasks', 'task_admins', 'task_owners'])
        task_tables.for_each(r.db(name).table_create(r.row)).run(conn)
        task_tables.for_each(r.db(name).table(r.row).index_create('task_id')).run(conn)

        LOGGER.info('Creating table and sub-tables: roles')
        role_tables = r.expr(['roles', 'role_admins', 'role_members', 'role_owners', 'role_tasks', 'role_packs'])
        role_tables.for_each(r.db(name).table_create(r.row)).run(conn)
        role_tables.for_each(r.db(name).table(r.row).index_create('role_id')).run(conn)

        LOGGER.info('Creating table and sub-tables: packs')
        pack_tables = r.expr(['packs', 'pack_owners'])
        pack_tables.for_each(r.db(name).table_create(r.row)).run(conn)
        pack_tables.for_each(r.db(name).table(r.row).index_create('pack_id')).run(conn)

    except ReqlRuntimeError as err:
        LOGGER.info('Rethink exception %s', err)

    finally:
        conn.close()
        LOGGER.info('Connection closed')


if __name__ == '__main__':
    opts = parse_args(sys.argv[1:])
    setup_db(opts.host, opts.port, opts.name)
